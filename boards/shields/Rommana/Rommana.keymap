/*
 * Copyright (c) 2021 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>
#include "keypos_30keys.h"

#define _BASE    0
#define _NAV     1
#define _SYM     2
#define _BTF     3

/ {
// ------------------------- MACROS --------------------------------
    macros {
        muc_the: macro_uc_the {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <0>;
            tap-ms = <5>;
            bindings
                = <&kp LS(T)>
                , <&kp H>
                , <&kp E>
                ;
        };

        mlc_the: macro_lc_the {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <0>;
            tap-ms = <5>;
            bindings
                = <&kp T>
                , <&kp H>
                , <&kp E>
                ;
        };

        muc_you: macro_uc_you {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <0>;
            tap-ms = <5>;
            bindings
                = <&kp LS(Y)>
                , <&kp O>
                , <&kp U>
                ;
        };

        mlc_you: macro_lc_you {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <0>;
            tap-ms = <5>;
            bindings
                = <&kp Y>
                , <&kp O>
                , <&kp U>
                ;
        };

        mlc_qu: macro_lc_qu {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <0>;
            tap-ms = <5>;
            bindings
                = <&kp Q>
                , <&kp U>
                ;
        };

        mlc_gh: macro_lc_gh {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <0>;
            tap-ms = <5>;
            bindings
                = <&kp G>
                , <&kp H>
                ;
        };

        mlc_ing: macro_lc_ing {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <0>;
            tap-ms = <5>;
            bindings
                = <&kp I>
                , <&kp N>
                , <&kp G>
                ;
        };
    };

    combos {
        compatible = "zmk,combos";
// ------------------------- LAYER COMBOS --------------------------------
        combo_BOOT {
            timeout-ms = <50>;
            key-positions = <LMC LTC>;
            bindings = <&bootloader>;
            layers = <_BTF>;
        };

        combo_BTF1 {
            timeout-ms = <50>;
            key-positions = <LHI RHI>;
            bindings = <&mo _BTF>;
            layers = <_BASE _SYM _NAV>;
        };

        combo_BTF2 {
            timeout-ms = <50>;
            key-positions = <LHI LHO>;
            bindings = <&mo _BTF>;
            layers = <_BASE _SYM _NAV>;
        };

        combo_BTF3 {
            timeout-ms = <50>;
            key-positions = <RHO RHI>;
            bindings = <&mo _BTF>;
            layers = <_BASE _SYM _NAV>;
        };

        combo_BTCLR {
            timeout-ms = <50>;
            key-positions = <LBR LBM LBI>;
            bindings = <&bt BT_CLR>;
            layers = <_BTF>;
        };

        combo_NAVR {
            timeout-ms = <50>;
            require-prior-idle-ms = <300>;
            key-positions = <RMP RMC>;
            bindings = <&tog _NAV>;
            layers = <_BASE _SYM _NAV>;
        };

        combo_NAVL {
            timeout-ms = <50>;
            require-prior-idle-ms = <300>;
            key-positions = <LMP LMC>;
            bindings = <&tog _NAV>;
            layers = <_BASE _SYM _NAV>;
        };

// ------------------------- MODS COMBOS --------------------------------
        combo_CAPS {
            timeout-ms = <50>;
            key-positions = <LMI RMI>;
            bindings = <&caps_word>;
            require-prior-idle-ms = <200>;
            layers = <_BASE>;
        };

// ------------------------- CHARACTER COMBOS --------------------------------
        combo_THE {
            timeout-ms = <100>;
            key-positions = <LMI LMM LMR>;
            bindings = <&mm_the>;
            layers = <_BASE>;
        };

        combo_YOU {
            timeout-ms = <150>;
            key-positions = <RTI RTM RTR>;
            bindings = <&mm_you>;
            layers = <_BASE>;
        };

        combo_QU {
            timeout-ms = <150>;
            key-positions =<RBM RBR>;
            bindings = <&mlc_qu>;
            layers = <_BASE>;
        };

        // combo_gh {
        //     timeout-ms = <150>;
        //     key-positions =<RMC RMI>;
        //     bindings = <&mlc_gh>;
        //     layers = <_BASE>;
        // };

        combo_ING {
            timeout-ms = <100>;
            key-positions = <RMI RMM RMR>;
            bindings = <&mlc_ing>;
            layers = <_BASE>;
        };

// ------------------------- SYMBOL COMBOS --------------------------------
        combo_LPAR {
            timeout-ms = <45>;
            require-prior-idle-ms = <200>;
            key-positions = <LMM LMI>;
            bindings = <&kp LPAR>;
            layers = <_BASE _SYM>;
        };

        combo_RPAR {
            timeout-ms = <45>;
            require-prior-idle-ms = <200>;
            key-positions = <RMI RMM>;
            bindings = <&kp RPAR>;
            layers = <_BASE _SYM>;
        };

        combo_LBRC {
            timeout-ms = <45>;
            require-prior-idle-ms = <200>;
            key-positions = <LTM LTI>;
            bindings = <&kp LBRC>;
            layers = <_BASE _SYM>;
        };

        combo_RBRC {
            timeout-ms = <45>;
            require-prior-idle-ms = <200>;
            key-positions = <RTI RTM>;
            bindings = <&kp RBRC>;
            layers = <_BASE _SYM>;
        };

        combo_LBKT {
            timeout-ms = <45>;
            require-prior-idle-ms = <200>;
            key-positions = <LBM LBI>;
            bindings = <&kp LBKT>;
            layers = <_BASE _SYM>;
        };

        combo_RBKT {
            timeout-ms = <45>;
            require-prior-idle-ms = <200>;
            key-positions = <RBI RBM>;
            bindings = <&kp RBKT>;
            layers = <_BASE _SYM>;
        };

        combo_GT {
            timeout-ms = <45>;
            require-prior-idle-ms = <200>;
            key-positions = <RMM RMR>;
            bindings = <&kp GT>;
            layers = <_BASE _SYM>;
        };

        combo_LT {
            timeout-ms = <45>;
            require-prior-idle-ms = <200>;
            key-positions = <LMM LMR>;
            bindings = <&kp LT>;
            layers = <_BASE _SYM>;
        };

// ------------------------- UTILITY COMBOS --------------------------------
        // combo_CP_M {
        //     timeout-ms = <40>;
        //     key-positions = <LTR LTM>;
        //     bindings = <&mac_cp>;
        //     layers = <_BASE>;
        //     require-prior-idle-ms = <200>;
        // };

        // combo_CP_W {
        //     timeout-ms = <40>;
        //     key-positions = <LBM LBR>;
        //     bindings = <&win_cp>;
        //     layers = <_BASE>;
        //     require-prior-idle-ms = <200>;
        // };
    };

    behaviors {
// ------------------------- TAP-DANCES --------------------------------
        win_cp: win_cp {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <500>;
            bindings = <&kp LC(C)>, <&kp LC(V)>, <&kp LC(X)>;
        };

        mac_cp: mac_cp {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <500>;
            bindings = <&kp LG(C)>, <&kp LG(V)>, <&kp LG(X)>;
        };

// ------------------------- HOLD-TAPS --------------------------------
        /* left-hand HRMs */
        hml: hrm_left {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <300>;
            quick-tap-ms = <170>;                // repeat on tap-into-hold
            require-prior-idle-ms = <250>;
            bindings = <&kp>, <&kp>;
            hold-trigger-key-positions = <KEYS_R THUMBS>;
            hold-trigger-on-release;             // delay positional check until key-release
        };

        /* right-hand HRMs */
        hmr: hrm_right {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <300>;
            quick-tap-ms = <170>;                // repeat on tap-into-hold
            require-prior-idle-ms = <250>;
            bindings = <&kp>, <&kp>;
            hold-trigger-key-positions = <KEYS_L THUMBS>;
            hold-trigger-on-release;             // delay positional check until key-release
        };

        hsl: hrs_left {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <250>;
            quick-tap-ms = <170>;                // repeat on tap-into-hold
            require-prior-idle-ms = <120>;
            bindings = <&kp>, <&kp>;
            hold-trigger-key-positions = <KEYS_R THUMBS>;
            hold-trigger-on-release;             // delay positional check until key-release
        };

        hsr: hrs_right {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <250>;
            quick-tap-ms = <170>;                // repeat on tap-into-hold
            require-prior-idle-ms = <120>;
            bindings = <&kp>, <&kp>;
            hold-trigger-key-positions = <KEYS_L THUMBS>;
            hold-trigger-on-release;             // delay positional check until key-release
        };

        bst: backspace-tap {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <200>;
            quick-tap-ms = <170>;
            //require-prior-idle-ms = <100>;
            bindings = <&mo>, <&kp>;
        };

        spt: space-tap {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <250>;
            quick-tap-ms = <200>;
            require-prior-idle-ms = <120>;
            bindings = <&mo>, <&kp>;
        };

// ------------------------- MOD-MORPHS --------------------------------
        mm_you: mm_you {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&mlc_you>, <&muc_you>;
            mods = <(MOD_LSFT)>;
        };

        mm_the: mm_the {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&mlc_the>, <&muc_the>;
            mods = <(MOD_LSFT)>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

                base_layer {
// -------------------------------    -------------------------------
// |  P  |  C  |  M  |  L  |  W  |    |  F  |  D  |  O  |  U  |  Y  |
// |  N  |  S  |  T  |  R  |  J  |    |  B  |  H  |  A  |  E  |  I  |
//       |  G  |  V  |  Z  |                |  K  |  X  |  Q  |
//        | _NAV(=) | _SYM(BSPC) |    | _NAV(SPC) | _SYM(+) |
                        bindings = <
   &kp P        &kp C        &kp M       &kp L        &kp W           &kp F  &kp D        &kp O       &kp U        &kp Y
   &hml LALT N  &hml LCTRL S &hml LGUI T &hsl LSHFT R &kp J           &kp B  &hsr LSHFT H &hmr LGUI A &hmr LCTRL E &hmr LALT I 
                &kp G        &kp V       &kp Z                               &kp K        &kp X       &kp Q
                                     &bst _NAV EQUAL  &bst _SYM BSPC  &spt _NAV SPACE  &spt _SYM PLUS
                        >;
                };

                nav_layer {
// -------------------------------    ---------------------------------
// |  !  |  "  |  ;  |  :  | INS |    | pUP | HOME |  UP | END  | ESC |
// |  ?  |  '  |  ,  |  .  | PSC |    | pDN | LEFT | SPC | RGHT | RET |
//       |  $  |  #  |  @  |                | TAB  |  DN | DEL  |
//                  | RET | BSPC |    | LSFT | BSPC |
                        bindings = <
   &kp EXCL        &kp DQT        &kp SEMI        &kp COLON      &kp INS         &kp PG_UP    &kp HOME        &kp UP          &kp END          &kp ESC
   &hml LALT QMARK &hml LCTRL SQT &hml LGUI COMMA &hsl LSHFT DOT &kp PSCRN       &kp PG_DN    &hsr LSHFT LEFT &hmr LGUI SPACE &hmr LCTRL RIGHT &hmr LALT RET
                   &kp DOLLAR     &kp HASH        &kp AT_SIGN                                 &kp TAB         &kp DOWN        &kp DEL
                                                  &kp RET        &bst _SYM BSPC  &kp LSHFT    &kp BSPC
                        >;
                };
                
                sym_layer {
// -------------------------------    -------------------------------
// |  \  |  |  |  _  |  =  | mCP |    |  ~  |  1  |  2  |  3  |  4  |
// |  /  |  *  |  -  |  +  | wCP |    |  `  |  5  |  6  |  7  |  8  |
//       |  &  |  ^  |  %  |                |  9  |  0  | . , |
//                  |     | BSPC |    | SPC | BSPC |
                        bindings = <
   &kp BSLH        &kp PIPE        &kp UNDER       &kp EQUAL       &mac_cp       &kp TILDE &kp N1        &kp N2       &kp N3        &kp N4
   &hml LALT SLASH &hml LCTRL STAR &hml LGUI MINUS &hsl LSHFT PLUS &win_cp       &kp GRAVE &hsr LSHFT N5 &hmr LGUI N6 &hmr LCTRL N7 &hmr LALT N8
                   &kp AMPS        &kp CARET       &kp PRCNT                               &kp N9        &kp N0       &kp KP_DOT
                                                          &none    &kp BSPC      &spt _NAV SPACE  &kp BSPC
                        >;
                };

                btf_layer {
// -------------------------------    ----------------------------
// | BT1 | BT2 | BT3 | BT4 | BT5 |    | F11 | F1 | F2  | F3  | F4 |
// | ALT | CTL | GUI | SFT | USB |    | F12 | F5 | F6  | F7  | F8 |
// |     |  v. |  v- |  v+ |     |    |     | F9 | F10 | APP |    |
//                   |     |     |    |     |    |
                        bindings = <
   &bt BT_SEL 0 &bt BT_SEL 1 &bt BT_SEL 2 &bt BT_SEL 3 &bt BT_SEL 4   &kp F11 &kp F1 &kp F2  &kp F3    &kp F4       
   &kp LALT     &kp LCTRL    &kp LGUI     &kp LSHFT    &out OUT_TOG   &kp F12 &kp F5 &kp F6  &kp F7    &kp F8
                &kp C_MUTE   &kp C_VOL_DN &kp C_VOL_UP                        &kp F9 &kp F10 &kp K_APP
                                                &none   &none         &none   &none
                        >;
                };                
    };
};
